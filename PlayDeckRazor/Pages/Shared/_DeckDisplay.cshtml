@using PlayDeckRazor.Model
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using NuGet.Protocol
@model IndexModel

@* Displays games associated with the corresponding deck id *@

@{
    if (ViewData["Deck"] is Deck d)
    {
        <div id="@d.Title-container" class="deck-display-container d-flex flex-column justify-content-center" x-data="{ search: ''}">
            <div id="@d.Title-header" class="deck-header d-flex">
                <div id="@d.Title-title" class="deck-title">
                    <h1>@d.Title</h1>
                </div>
                <div class="add-game-button-container">
                    <a class="add-game-button btn btn-primary" asp-page="/Games/Edit" asp-route-DeckID="@d.ID" role="button" title="Add new card to deck">+</a>
                </div>
                @{
                    @* If deck is 'My Collection' (Unassigned) include search as could contain many entries *@
                    if (d.ID == 0) 
                    {
                        <div class="deck-search ">
                            <form x-on:submit.prevent="{}">
                                <p>
                                    <input x-on:keyup.enter.prevent="{}" type="text" x-model.debounce="search" placeholder="Search..."/>
                                </p>
                            </form>
                        </div>
                        <div class="view-all-container" style="margin-left: 0">
                            <a class="view-all-button" asp-page="/Decks/View" asp-route-id="@d.ID" asp-route-Title="@d.Title">View All
                                <span class="badge bg-secondary">@d.GameList.Count</span>
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="view-all-container">
                            <a class="view-all-button" asp-page="/Decks/View" asp-route-id="@d.ID" asp-route-Title="@d.Title">View All
                                <span class="badge bg-secondary">@d.GameList.Count</span>
                            </a>
                        </div>
                    }
                }
            </div>
            <div id="@d.Title-display" class="deck-display d-flex justify-content-center">
                <ul id="@d.Title-cards" class="deck d-flex flex-wrap">
                    @{
                        List<Game> sortedList;
                        switch (d.ID)
                        {
                            case 0:
                                @* 'My Collection', sort by alphabetical, Display 10 cards *@
                                sortedList = d.GameList.OrderBy(g=>g.Title).ToList(); 
                                for (int i = 0; i < 10 && i < sortedList.Count; i++)
                                {
                                    ViewData["GameCard"] = sortedList[i];
                                    await Html.RenderPartialAsync("_GameCard", Model);
                                }
                                break;
                            case 1:
                                 @* 'Currently Playing', sort by least recently started, Display all cards *@
                                sortedList = d.GameList.OrderBy(g=>g.StartDate).ToList();
                                for (int i = 0; i < sortedList.Count; i++)
                                {
                                    ViewData["GameCard"] = sortedList[i];
                                    await Html.RenderPartialAsync("_GameCard", Model);
                                }
                                break;
                            case 2:
                                 @* 'Complete', Sort by most recently completed, Display 5 cards *@
                                sortedList = d.GameList.OrderByDescending(g=>g.CompleteDate).ToList();
                                for (int i = 0; i < 5 && i < sortedList.Count; i++)
                                {
                                    ViewData["GameCard"] = sortedList[i];
                                    await Html.RenderPartialAsync("_GameCard", Model);
                                }
                                break;
                            default:
                                @* Future proofing for display of any custom decks user has made *@
                                foreach (Game g in d.GameList)
                                {
                                    ViewData["GameCard"] = g;
                                    await Html.RenderPartialAsync("_GameCard", Model);
                                }
                                break;
                        }
                    }
                </ul>
            </div>
        </div> 
    }
}
